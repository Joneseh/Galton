dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
# Script to set up the data files for processing in markdown
#9 November 2014:  we may have to subset the data to small or large hospitals rather than ALL for percentiles calcs
#
library(knitr)
library(stringr)
library(plyr)
# Load data from previous work
load("numericdataout")
#good.direction <- read.csv("good direction.csv")
# hard code for now, look into best method for pulling
lower <- c("pghq_PFC_energy_3_1_1_6","pghq_PFC_waste_10_1_tH_15",
"pghq_PFC_waste_6_3_5","pghq_PFC_water_1_7","Pounds_total_waste_per_patient_day"
)
# Create function to create table of percentages
# function takes a vector and creates sample percentiles, removing NA and using sports ranking method for ties
# see rank documentation (e.g. if the values are in order 90, 88, 88, sports ranking produces 1, 3,3--tied for third)
ptile_create <- function(x) {
n_valid <- length(which(!is.na(x)))
ptile_out <- rank(x,na.last="keep", ties.method="min")/n_valid
}
dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
# Script to set up the data files for processing in markdown
#9 November 2014:  we may have to subset the data to small or large hospitals rather than ALL for percentiles calcs
#
library(knitr)
library(stringr)
library(plyr)
# Load data from previous work
load("numericdataout")
#good.direction <- read.csv("good direction.csv")
# hard code for now, look into best method for pulling
lower <- c("pghq_PFC_energy_3_1_1_6","pghq_PFC_waste_10_1_tH_15",
"pghq_PFC_waste_6_3_5","pghq_PFC_water_1_7","Pounds_total_waste_per_patient_day"
)
# Create function to create table of percentages
# function takes a vector and creates sample percentiles, removing NA and using sports ranking method for ties
# see rank documentation (e.g. if the values are in order 90, 88, 88, sports ranking produces 1, 3,3--tied for third)
ptile_create <- function(x) {
n_valid <- length(which(!is.na(x)))
ptile_out <- rank(x,na.last="keep", ties.method="min")/n_valid
}
dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
wordtbl[,3:6] <- apply(wordtbl[,3:6], 2, function(x) round(as.numeric(as.character(x)),2))
pandoc.table(wordtbl, justify=justifylist,  emphasize.rownames= FALSE, split.table = Inf,panderOptions(keep.trailing.zeros,TRUE))
apply(wordtbl[,3:6], 2, function(x) round(as.numeric(as.character(x)),2))
pandoc.table(wordtbl, justify=justifylist,  emphasize.rownames= FALSE, split.table = Inf,
keep.trailing.zeros=TRUE)
panderOptions
getOption("pander")
# Script to set up the data files for processing in markdown
#9 November 2014:  we may have to subset the data to small or large hospitals rather than ALL for percentiles calcs
#
library(knitr)
library(stringr)
library(plyr)
# Load data from previous work
load("numericdataout")
#good.direction <- read.csv("good direction.csv")
# hard code for now, look into best method for pulling
lower <- c("pghq_PFC_energy_3_1_1_6","pghq_PFC_waste_10_1_tH_15",
"pghq_PFC_waste_6_3_5","pghq_PFC_water_1_7","Pounds_total_waste_per_patient_day"
)
# Create function to create table of percentages
# function takes a vector and creates sample percentiles, removing NA and using sports ranking method for ties
# see rank documentation (e.g. if the values are in order 90, 88, 88, sports ranking produces 1, 3,3--tied for third)
ptile_create <- function(x) {
n_valid <- length(which(!is.na(x)))
ptile_out <- rank(x,na.last="keep", ties.method="min")/n_valid
}
dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
---
title: `r hosp_name`
output: html_document
---
```{r loadlibraries,echo=FALSE, warning=FALSE}
library(xlsxjars)
library (xlsx)
library(stringr)
library(plyr)
library(gridExtra)
library(gtable)
library(dplyr)
library(ggplot2)
library(xtable)
library(pander)
load("numericdataout")
source("functions 7 Aug 2014.R")
source("Median Table.R")
source("shared_functions.R")
source("Median Table Rmd Output.R")
```
```{r global_options, include=FALSE, echo=FALSE, warning=FALSE}
filepath = paste0("figure/",App_ID ,"/")
opts_chunk$set(fig.path=filepath)
opts_chunk$set(echo=FALSE,fig.cap="")
```
```{r plot, fig.width=9, fig.height=11,echo=FALSE,warning=FALSE}
index_value <- which(data_n_core[,1]==App_ID)
curvals <- data_n_core_ptiles[index_value,]
# groups = c("Climate", "Energy", "Food" , "GOR", "Waste")
# tabs = c(1.5,5.5, 8.5, 12.5, 16.5)
lab<-1:length(curvals)
percentile=curvals*100
namlabel<-substring(names(curvals),1,15)
namlabel<-paste0("M",c(1:length(curvals)))
# plot(lab,percentile, pch=17, col="black", ylim=c(0,100),xaxt="n",yaxt="n",xlab="")
# axis(1, at=1:length(curvals), labels=namlabel, las = 3, cex.axis = 1)
# axis(2, at=c(10,50,90))
# abline(h=c(10,50,90),col="blue")
# abline(v=tabs, col="yellow")
# #mtext(groups[1], side = 3, line=0, at=0)
# mtext(groups, side = 3, line=0, at=tabs)
#
# #text(x=tabs[1],y=100,labels=groups[1], pos=4 )
hosp_name <- data_n_core[data_n_core$Application.ID == App_ID,2]
# Alternative to defining vector with upper/lower case elements is to use the Measure.Family labels (all caps) from dnum_core
meas_fam <- c("Climate",rep("Energy",4),rep("Food",3),rep("GOR",4),rep("Waste",3),"Water","Waste","Energy","Water")
plot_df <- data.frame(lab,meas_fam,(t(percentile)))
plot_df <- with(plot_df,plot_df[order(plot_df$meas_fam),])
plot_df$lab <- 1:length(plot_df$lab)
plot_df$namlabel <- factor(namlabel,levels=c("M1","M2","M3","M4","M5","M6","M7","M8","M9","M10",
"M11","M12","M13","M14","M15","M16","M17","M18","M19"))
names(plot_df)[3] <- "Curvals"
#size 800 by 470 looks good
p1 <- ggplot()+
geom_point(data=plot_df,aes(x=namlabel,y=Curvals),size=4) +
theme_bw() +
geom_hline(yintercept=10,linetype="dashed") + geom_hline(yintercept=50,linetype="dashed") + geom_hline(yintercept=90,linetype="dashed") +
theme(axis.title = element_text(size=rel(1.25))) +
xlab("Measure") +
theme(axis.text.x = element_text(size=12))+
ylab("Score") +
theme(axis.text.y = element_text(size=12)) +
scale_y_continuous(breaks=c(10,50,90)) +
ggtitle(paste0("Score profile for ",hosp_name,"\n For each measure, values are ranked and converted to 0 to 100 score, 100 best")) +
theme(plot.title=element_text(size=rel(1.25)))
#now add shading for the types of measures
groups = c("Climate", "Energy", "Food" , "GOR", "Waste","Water")
xmin = c(0.5,6.5,13.5)
xmax <- c(1.5,9.5,17.5)
df_shade <- data.frame(xmin,xmax,ymin = 0, ymax = 100)
p2 <- p1 + geom_rect(data=df_shade,aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),fill="gray50",alpha=0.25)
# Now add labels for each measure family
p3 <- p2 + annotate("text",x=1.3,y=103, label=groups[1])+
annotate("text",x=4,y=103, label=groups[2])+
annotate("text",x=8,y=103, label=groups[3])+
annotate("text",x=11.5,y=103, label=groups[4])+
annotate("text",x=15.5,y=103, label=groups[5])+
annotate("text",x=18.5,y=103, label=groups[6])
# Create table of Measure names and tick marks for a legend
# order the names to correspond to the tick marks
Measure_names1 <- dnum_core$Measure.Name[c(1:5,18,6:15,17,16,19)]
table_df <- data.frame(plot_df$namlabel,Measure_names1,format(plot_df$Curvals,digits=2),stringsAsFactors=FALSE)
names(table_df)[1] <- "Legend"
names(table_df)[2] <- "Measure Name"
names(table_df)[3] <- "Percentile"
table_df[,2] <- gsub("_"," ",table_df[,2])   #
table_out <- tableGrob(table_df[,1:2],show.rownames=FALSE,gpar.coretext=gpar(col="black",cex=0.75))
grid.arrange(p3,table_out)
```
```{r table, echo=FALSE,warning=FALSE}
#get the index of the variables corresponding to the core variables
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#Now create a table of medians and percentiles.
#
df_core_median <- median_table_summary1(df=data_n_core,num_desc_cols=9,
table_vars_names = c("Variable_Name","Median_All","Median_Small","Median_Large","p90th_All","p10th_All"),
table_names_n = c("Variable_Name","All_n","Small_n","Large_n","p_tiles_n")
)
#now pull off the individual hospital's values
hosp_row_values <- t(data_n_core[which(data_n_core[,1]==App_ID),])
hosp_values<- as.vector(hosp_row_values[,1])
append_hosp <- as.numeric(hosp_values[10:28])
#Get regular names
core.names.idx <- match(df_core_median$Variable_Name,dnum_use$Question.i.d.)
reg_names_core <- dnum_use$Measure.Name[core.names.idx]
df_core_median <- data.frame(reg_names_core,df_core_median[,1],append_hosp,df_core_median[,2:10])
names(df_core_median)[1] <- "Measure Name"
names(df_core_median)[2]  <- "Variable ID"
names(df_core_median)[3] <- hosp_values[2]
#now edit the table to match the row order of the graph, adding in meas family names and corrected measure names
# TODO handle this more gracefully by calculating it
lowerlist.idx <- c(4,14,16:18)
Measure_names1[lowerlist.idx] <- paste0("** ", Measure_names1[lowerlist.idx])
df_core_median <- data.frame(meas_fam,df_core_median)
df_core_median <- with(df_core_median,df_core_median[order(df_core_median$meas_fam),])
df_core_median_sub <- data.frame(df_core_median[,1],Measure_names1,df_core_median[,c(4,9,5,8,10)])
df_core_median_sub$Measure_names1 <- gsub("_"," ",df_core_median_sub$Measure_names1)
names(df_core_median_sub)[1] <- "Family"
names(df_core_median_sub)[2] <- "Measure"
names(df_core_median_sub)[3] <- "This Hospital"
#Create table
#table_out2 <- tableGrob(df_core_median_sub,show.rownames=FALSE,gpar.coretext=gpar(col="black",cex=0.75))
#grid.arrange(table_out2,main="Table title placeholder")
#grid.draw(table_out2)
```
```{r wordtables,results='asis', echo=FALSE}
justifylist = c(rep("left",2), rep("right",5))
wordtbl <- df_core_median_sub
row.names(wordtbl) <-NULL
wordtbl[,3:6] <- apply(wordtbl[,3:6], 2, function(x) round(as.numeric(as.character(x)),2))
pandoc.table(wordtbl, justify=justifylist,  emphasize.rownames= FALSE, split.table = Inf,
keep.trailing.zeros=TRUE, emphasize.cells(1,1))
```
\** For Measures that are asterisked, a lower value is better
__This is It__
# Script to set up the data files for processing in markdown
#9 November 2014:  we may have to subset the data to small or large hospitals rather than ALL for percentiles calcs
#
library(knitr)
library(stringr)
library(plyr)
# Load data from previous work
load("numericdataout")
#good.direction <- read.csv("good direction.csv")
# hard code for now, look into best method for pulling
lower <- c("pghq_PFC_energy_3_1_1_6","pghq_PFC_waste_10_1_tH_15",
"pghq_PFC_waste_6_3_5","pghq_PFC_water_1_7","Pounds_total_waste_per_patient_day"
)
# Create function to create table of percentages
# function takes a vector and creates sample percentiles, removing NA and using sports ranking method for ties
# see rank documentation (e.g. if the values are in order 90, 88, 88, sports ranking produces 1, 3,3--tied for third)
ptile_create <- function(x) {
n_valid <- length(which(!is.na(x)))
ptile_out <- rank(x,na.last="keep", ties.method="min")/n_valid
}
dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
# Script to set up the data files for processing in markdown
#9 November 2014:  we may have to subset the data to small or large hospitals rather than ALL for percentiles calcs
#
library(knitr)
library(stringr)
library(plyr)
# Load data from previous work
load("numericdataout")
#good.direction <- read.csv("good direction.csv")
# hard code for now, look into best method for pulling
lower <- c("pghq_PFC_energy_3_1_1_6","pghq_PFC_waste_10_1_tH_15",
"pghq_PFC_waste_6_3_5","pghq_PFC_water_1_7","Pounds_total_waste_per_patient_day"
)
# Create function to create table of percentages
# function takes a vector and creates sample percentiles, removing NA and using sports ranking method for ties
# see rank documentation (e.g. if the values are in order 90, 88, 88, sports ranking produces 1, 3,3--tied for third)
ptile_create <- function(x) {
n_valid <- length(which(!is.na(x)))
ptile_out <- rank(x,na.last="keep", ties.method="min")/n_valid
}
dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
?pandoc.table
wordtbl[,3:6] <- apply(wordtbl[,3:6], 2, function(x) round(as.numeric(as.character(x)),2))
pandoc.table(wordtbl, justify=justifylist,  emphasize.rownames= FALSE, split.table = Inf,
keep.trailing.zeros=TRUE, emphasize.strong.cells=1:2)
pandoc.table(t$mpg, emphasize.strong.cells = 1:2)
t <- mtcars[1:3, 1:5]
pandoc.table(t$mpg, emphasize.strong.cells = 1)
pandoc.table(t, emphasize.strong.cells = 1)
pandoc.table(t, emphasize.strong.cells = 1:1)
pandoc.table(t, emphasize.strong.rows=1)
emphasize.strong.cells(which t >20, arr.ind=TRUE))
emphasize.strong.cells(which( t >20, arr.ind=TRUE))
pandoc.table(t)
emphasize.strong.rows(0)
pandoc.table(t)
# Script to set up the data files for processing in markdown
#9 November 2014:  we may have to subset the data to small or large hospitals rather than ALL for percentiles calcs
#
library(knitr)
library(stringr)
library(plyr)
# Load data from previous work
load("numericdataout")
#good.direction <- read.csv("good direction.csv")
# hard code for now, look into best method for pulling
lower <- c("pghq_PFC_energy_3_1_1_6","pghq_PFC_waste_10_1_tH_15",
"pghq_PFC_waste_6_3_5","pghq_PFC_water_1_7","Pounds_total_waste_per_patient_day"
)
# Create function to create table of percentages
# function takes a vector and creates sample percentiles, removing NA and using sports ranking method for ties
# see rank documentation (e.g. if the values are in order 90, 88, 88, sports ranking produces 1, 3,3--tied for third)
ptile_create <- function(x) {
n_valid <- length(which(!is.na(x)))
ptile_out <- rank(x,na.last="keep", ties.method="min")/n_valid
}
dnum_use$names1_vec <- c(dnum_use$Question.i.d.[1:130],dnum_use$Measure.Name[131:167])
#now identify and select the columns from the data_n data frame
dnum_core <- dnum_use[which(dnum_use$Core.use == "core"),]
data.colsn.core.idx <- na.omit(match(dnum_core$names1_vec,names(data_n)))
data_n_core <- data_n[,c(1:9,data.colsn.core.idx)]
#now use apply function to create a new data frame of percentiles
data_n_core_ptiles <- as.data.frame(lapply(data_n_core[,10:28],ptile_create))
data_n_core_ptiles[,lower]<- (1 - data_n_core_ptiles[,lower])
# Get and save the current working directory
curwd <- getwd()
# Set the Rmd File
RmdFile <-  paste0(getwd(),"/Oct2014IndividualHospitalReport.Rmd")
# Create a variable quot to make it easier to quote our file namd
quot<-'"'
# Create the two directories with timestamps
out_dir <- paste0(curwd,"/Word_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
out_dir_md <- paste0(curwd,"/Md_Reports_by_Hospital_",format(Sys.time(),"%Y-%m-%d-%H-%M"))
dir.create(out_dir)
dir.create(out_dir_md)
# Set the working directory to be where the md and figures will be
setwd(out_dir_md)
# Now run the loop TESTING WITH DARTMOUTH-HITCHCOCK
for (App_ID in unique(as.character(data_n_core$Application.ID[55]))) {
# Grab the application id to be part of the file names
filename <- App_ID
mdoutput <- paste0(filename,"_","Report.md")
knit(RmdFile, mdoutput)
# We can get around spaces by putting quotes around the full name before the extension e.g. "c:/dir with space/report".docx
docxoutput <- paste0(quot, out_dir,"/",filename,"_","Report", quot, ".docx")
system(paste0("pandoc -s -o ",docxoutput, " ", mdoutput, " --data-dir ",curwd, " --template  reference.docx"))
}
setwd(curwd)
setwd("~/Online Classes/Data Science/R Stuff/Data Product/Galton/Galton")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
options(github.username = "Joneseh")
options(github.password = "AthenaOO")
?publish_github
publish_github(repo="http:/Joneseh.github.io/Galton", username="Joneseh")
